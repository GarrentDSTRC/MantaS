// Generated by gencpp from file sensor_fish/BatteryStatus.msg
// DO NOT EDIT!


#ifndef SENSOR_FISH_MESSAGE_BATTERYSTATUS_H
#define SENSOR_FISH_MESSAGE_BATTERYSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sensor_fish
{
template <class ContainerAllocator>
struct BatteryStatus_
{
  typedef BatteryStatus_<ContainerAllocator> Type;

  BatteryStatus_()
    : total_voltage(0.0)
    , soc(0.0)
    , soh(0.0)
    , relay_status()  {
    }
  BatteryStatus_(const ContainerAllocator& _alloc)
    : total_voltage(0.0)
    , soc(0.0)
    , soh(0.0)
    , relay_status(_alloc)  {
  (void)_alloc;
    }



   typedef float _total_voltage_type;
  _total_voltage_type total_voltage;

   typedef float _soc_type;
  _soc_type soc;

   typedef float _soh_type;
  _soh_type soh;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _relay_status_type;
  _relay_status_type relay_status;





  typedef boost::shared_ptr< ::sensor_fish::BatteryStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sensor_fish::BatteryStatus_<ContainerAllocator> const> ConstPtr;

}; // struct BatteryStatus_

typedef ::sensor_fish::BatteryStatus_<std::allocator<void> > BatteryStatus;

typedef boost::shared_ptr< ::sensor_fish::BatteryStatus > BatteryStatusPtr;
typedef boost::shared_ptr< ::sensor_fish::BatteryStatus const> BatteryStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sensor_fish::BatteryStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sensor_fish::BatteryStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sensor_fish::BatteryStatus_<ContainerAllocator1> & lhs, const ::sensor_fish::BatteryStatus_<ContainerAllocator2> & rhs)
{
  return lhs.total_voltage == rhs.total_voltage &&
    lhs.soc == rhs.soc &&
    lhs.soh == rhs.soh &&
    lhs.relay_status == rhs.relay_status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sensor_fish::BatteryStatus_<ContainerAllocator1> & lhs, const ::sensor_fish::BatteryStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sensor_fish

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sensor_fish::BatteryStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sensor_fish::BatteryStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sensor_fish::BatteryStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sensor_fish::BatteryStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensor_fish::BatteryStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensor_fish::BatteryStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sensor_fish::BatteryStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aa534ae183105e5adab0c5d36158f85e";
  }

  static const char* value(const ::sensor_fish::BatteryStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaa534ae183105e5aULL;
  static const uint64_t static_value2 = 0xdab0c5d36158f85eULL;
};

template<class ContainerAllocator>
struct DataType< ::sensor_fish::BatteryStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sensor_fish/BatteryStatus";
  }

  static const char* value(const ::sensor_fish::BatteryStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sensor_fish::BatteryStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 total_voltage\n"
"float32 soc\n"
"float32 soh\n"
"string relay_status\n"
;
  }

  static const char* value(const ::sensor_fish::BatteryStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sensor_fish::BatteryStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.total_voltage);
      stream.next(m.soc);
      stream.next(m.soh);
      stream.next(m.relay_status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BatteryStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sensor_fish::BatteryStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sensor_fish::BatteryStatus_<ContainerAllocator>& v)
  {
    s << indent << "total_voltage: ";
    Printer<float>::stream(s, indent + "  ", v.total_voltage);
    s << indent << "soc: ";
    Printer<float>::stream(s, indent + "  ", v.soc);
    s << indent << "soh: ";
    Printer<float>::stream(s, indent + "  ", v.soh);
    s << indent << "relay_status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.relay_status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SENSOR_FISH_MESSAGE_BATTERYSTATUS_H
