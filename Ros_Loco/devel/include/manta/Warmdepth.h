// Generated by gencpp from file manta/Warmdepth.msg
// DO NOT EDIT!


#ifndef MANTA_MESSAGE_WARMDEPTH_H
#define MANTA_MESSAGE_WARMDEPTH_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace manta
{
template <class ContainerAllocator>
struct Warmdepth_
{
  typedef Warmdepth_<ContainerAllocator> Type;

  Warmdepth_()
    : time()
    , height(0.0)
    , temp(0.0)
    , depth(0.0)
    , pressure(0.0)
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)  {
    }
  Warmdepth_(const ContainerAllocator& _alloc)
    : time(_alloc)
    , height(0.0)
    , temp(0.0)
    , depth(0.0)
    , pressure(0.0)
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _time_type;
  _time_type time;

   typedef float _height_type;
  _height_type height;

   typedef float _temp_type;
  _temp_type temp;

   typedef float _depth_type;
  _depth_type depth;

   typedef float _pressure_type;
  _pressure_type pressure;

   typedef float _roll_type;
  _roll_type roll;

   typedef float _pitch_type;
  _pitch_type pitch;

   typedef float _yaw_type;
  _yaw_type yaw;





  typedef boost::shared_ptr< ::manta::Warmdepth_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::manta::Warmdepth_<ContainerAllocator> const> ConstPtr;

}; // struct Warmdepth_

typedef ::manta::Warmdepth_<std::allocator<void> > Warmdepth;

typedef boost::shared_ptr< ::manta::Warmdepth > WarmdepthPtr;
typedef boost::shared_ptr< ::manta::Warmdepth const> WarmdepthConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::manta::Warmdepth_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::manta::Warmdepth_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::manta::Warmdepth_<ContainerAllocator1> & lhs, const ::manta::Warmdepth_<ContainerAllocator2> & rhs)
{
  return lhs.time == rhs.time &&
    lhs.height == rhs.height &&
    lhs.temp == rhs.temp &&
    lhs.depth == rhs.depth &&
    lhs.pressure == rhs.pressure &&
    lhs.roll == rhs.roll &&
    lhs.pitch == rhs.pitch &&
    lhs.yaw == rhs.yaw;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::manta::Warmdepth_<ContainerAllocator1> & lhs, const ::manta::Warmdepth_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace manta

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::manta::Warmdepth_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::manta::Warmdepth_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::manta::Warmdepth_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::manta::Warmdepth_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::manta::Warmdepth_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::manta::Warmdepth_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::manta::Warmdepth_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0f43c6bd4e53f4d204b397bebc018f0b";
  }

  static const char* value(const ::manta::Warmdepth_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0f43c6bd4e53f4d2ULL;
  static const uint64_t static_value2 = 0x04b397bebc018f0bULL;
};

template<class ContainerAllocator>
struct DataType< ::manta::Warmdepth_<ContainerAllocator> >
{
  static const char* value()
  {
    return "manta/Warmdepth";
  }

  static const char* value(const ::manta::Warmdepth_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::manta::Warmdepth_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string time\n"
"float32 height\n"
"float32 temp\n"
"float32 depth\n"
"float32 pressure\n"
"float32 roll\n"
"float32 pitch\n"
"float32 yaw\n"
;
  }

  static const char* value(const ::manta::Warmdepth_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::manta::Warmdepth_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time);
      stream.next(m.height);
      stream.next(m.temp);
      stream.next(m.depth);
      stream.next(m.pressure);
      stream.next(m.roll);
      stream.next(m.pitch);
      stream.next(m.yaw);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Warmdepth_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::manta::Warmdepth_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::manta::Warmdepth_<ContainerAllocator>& v)
  {
    s << indent << "time: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.time);
    s << indent << "height: ";
    Printer<float>::stream(s, indent + "  ", v.height);
    s << indent << "temp: ";
    Printer<float>::stream(s, indent + "  ", v.temp);
    s << indent << "depth: ";
    Printer<float>::stream(s, indent + "  ", v.depth);
    s << indent << "pressure: ";
    Printer<float>::stream(s, indent + "  ", v.pressure);
    s << indent << "roll: ";
    Printer<float>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<float>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MANTA_MESSAGE_WARMDEPTH_H
